#!/bin/bash
set -eu

JOB=runtime-runc
BIN=containerd
SIGTERM_FOR=15
SIGKILL_FOR=5

RUN_DIR=/var/vcap/sys/run/$JOB
LOG_DIR=/var/vcap/sys/log/$JOB
JOB_DIR=/var/vcap/jobs/$JOB
DAT_DIR=/var/vcap/data/k8s/$JOB
STO_DIR=/var/vcap/store/k8s/$JOB
PIDFILE=$RUN_DIR/$BIN.pid
exec >>$LOG_DIR/$BIN.log 2>&1

# set runc + containerd binaries in our path
export PATH=$PATH:/var/vcap/packages/runtime-runc/bin
export PATH=$PATH:/var/vcap/packages/containerd/bin
export PATH=$PATH:/var/vcap/packages/socat/bin

<% p('mirrors', []).each do |mirror| %>
  <% if mirror['tls'!=nil]%>
    <% if mirror['tls']['ca']!=nil %>echo <%= mirror['tls']['ca'] %> > /var/vcap/packages/containerd/<%= mirror['name'] %>_ca.pem<%end %>
    <% if mirror['tls']['ca']!=nil %>echo <%= mirror['tls']['cert'] %> > /var/vcap/packages/containerd/<%= mirror['name'] %>_cert.pem<%end %>
    <% if mirror['tls']['ca']!=nil %>echo <%= mirror['tls']['key'] %> > /var/vcap/packages/containerd/<%= mirror['name'] %>_key.pem<%end %>
  <% end %>
<% end %>

case $1 in
  start)
    mkdir -p $RUN_DIR $DAT_DIR $STO_DIR

    echo "[$(date)] $BIN/$$: starting up..."
    if [[ -f $PIDFILE ]]; then
      PID=$(head -1 $PIDFILE)
      if [[ -n "$PID" ]]; then
        if [[ -e /proc/$PID ]]; then
          echo "[$(date)] $BIN/$$: found pid file $PIDFILE, with pid '$PID' (which is running)"
          exit 1
        fi
        echo "[$(date)] $BIN/$$: found (stale) pid file $PIDFILE, with pid '$PID' (which is defunct)"
      fi
      rm -f $PIDFILE
    fi

    # create the runtime_root for containerd + runsc
    mkdir -p $RUN_DIR/$BIN/runsc

    # load the overlayfs kmod
    /sbin/modprobe overlay

    ulimit -n 1048576    # open files
    ulimit -u unlimited  # num processes

    echo $$ > $PIDFILE
    exec containerd --config $JOB_DIR/etc/containerd.toml --root $STO_DIR

    echo "[$(date)] $BIN/$$: exec failed!"
    exit 42
    ;;


  stop)

    # FIXME: wait for kubelet to be shut down

    echo "[$(date)] $BIN/$$: shutting down..."
    if [[ -f $PIDFILE ]]; then
      PID=$(head -1 $PIDFILE)
      if [[ -n "$PID" ]]; then
        if [[ -e /proc/$PID ]]; then
          echo "[$(date)] $BIN/$$: found pid file $PIDFILE, with pid '$PID' (which is running)"
          echo "[$(date)] $BIN/$$: sending SIGTERM for ${SIGTERM_FOR}s, followed by a SIGKILL..."
          for i in $(seq 1 $(expr $SIGTERM_FOR \* 10)); do
            kill -TERM $PID || true
            if [[ ! -e /proc/$PID ]]; then
              echo "[$(date)] $BIN/$$: pid $PID terminated (via SIGTERM)"
              rm -f $PIDFILE
              echo "[$(date)] $BIN/$$: shut down complete"
              exit 0
            fi
            sleep 0.1
          done

          echo "[$(date)] $BIN/$$: pid $PID did not termiante (via SIGTERM) within ${SIGTERM_FOR}s; sending a SIGKILL and waiting ${SIGKILL_FOR}s..."
          for i in $(seq 1 $(expr $SIGKILL_FOR \* 10)); do
            kill -KILL $PID || true
            if [[ ! -e /proc/$PID ]]; then
              echo "[$(date)] $BIN/$$: pid $PID terminated (via SIGKILL)"
              rm -f $PIDFILE
              echo "[$(date)] $BIN/$$: shut down complete"
              exit 0
            fi
            sleep 0.1
          done
          echo "[$(date)] $BIN/$$: pid $PID did not termiante (via SIGKILL) within ${SIGKILL_FOR}s; giving up."
          exit 1
        fi

        echo "[$(date)] $BIN/$$: found (stale) pid file $PIDFILE, with pid '$PID' (which is defunct)"
      fi
      rm -f $PIDFILE
    fi
    echo "[$(date)] $BIN/$$: shut down complete"
    exit 0
    ;;
esac
