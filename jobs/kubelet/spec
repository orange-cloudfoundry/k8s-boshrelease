---
name: kubelet
description: |
  An agent that runs on each node in the cluster. It makes sure that
  containers are running in a pod.

  The kubelet takes a set of PodSpecs that are provided through various
  mechanisms and ensures that the containers described in those PodSpecs are
  running and healthy. The kubelet doesnâ€™t manage containers which were not
  created by Kubernetes.

  Because of naming limitations in Kubernetes (the 63-character label limit),
  kubelet nodes are registered as "$id.k8s", where _$id_ is the UUID of the
  deployment VM.  This leads to 40-character names (36 or the UUID and 4 for
  the ".k8s" suffix), which are acceptable to API server.

  This in turn means that we **must** use BOSH-DNS when deploying k8s.
  Don't forget to add that to your director's runtime-config before deploying.
  The `control' job provides bosh-dns aliases to wire all that up.

packages:
  - k8s
  - cfssl
  - ipvsadm

consumes:
  - name: api
    type: k8s-apiserver

  - name: cloud-provider
    type: k8s-cloud-provider

templates:
  bin/nodename:     bin/nodename

  bin/pre-start:    bin/pre-start
  bin/pre-stop:     bin/pre-stop
  bin/post-start:   bin/post-start
  bin/pre-stop:     bin/pre-stop
  tls/ca/cert.pem:  tls/ca/cert.pem
  tls/ca/key.pem:   tls/ca/key.pem

  bin/kubelet:      bin/kubelet
  etc/kubelet.yml:  etc/kubelet.yml
  etc/cloud-config: etc/cloud-config

  bin/post-deploy:  bin/post-deploy

  bin/drain:        bin/drain

properties:
  debug:
    default:     false
    description: Enables verbose debugging, suitable for troubleshooting.

  drain:
    default: true
    description: |
      This kubelet job now has the ability to issue a `kubectl drain` as a BOSH drain script,
      ensuring that pods are evicted before a kubelet node is shut down or restarted.  If for
      whatever reason you want the legacy behavior, you can set this to false, and BOSH will
      **not** drain off the kubelet before shutting down the process.

  apiserver:
    default: '127.0.0.1:6443'
    description: |
      How to find the Kubernetes API server for reporting in as a node in the cluster.
      By default, the API server is expected to be running on loopback, but you can set
      this property to an "ip:port" of an external endpoint (i.e., a load balancer).

      Note: for large, highly-available clusters, where the kubelets are not necessarily
      co-located with the API server nodes, you *must* set this property.

  master:
    default: false
    description: |
      Whether or not thie Kubernetes node is a "master" node (responsible solely for
      control plane work) or a regular worker node.  This sets up some base labels and
      taints, without requiring you to think too much about it.

      This property only takes effect on the initial deploy.  To manage taints and labels
      after deployment, please refer to the `kubectl' command-line help.

  labels:
    default: {}
    description: |
      Additional node labels, in `key: value` format, to apply to this kubelet.
      The special strings '(deployment)', '(name)', and '(id)' will be replaced with the
      (potentially node-specific) values: the deployment name, the instance group name,
      and the instance group UUID, respectively.

      This is an _additive_ property; it only ever creates or updates node labels.
      If you remove a label and re-deploy, you will see no effect.  To remove labels
      that you no longer want or need, please refer to the `kubectl' command-line help.

  taints:
    default: []
    description: |
      Additional node taints, in `key=value:effect` format, to apply to this kubelet.
      For example, to prevent scheduling non-control-plane pods on the master nodes,
      you could add the taint 'node-role.kubernetes.io/master=true:NoSchedule'.

      This property only takes effect on the initial deploy.  To manage taints and labels
      after deployment, please refer to the `kubectl' command-line help.

  kubelet.flags:
    default: []
    description: |
      A list of additional flags to pass to the kubelet daemon.  These flags are
      appended to the command-line after the hard-coded default flags.  Use this option
      with caution; it has the possibility to horribly break your deployment.

      Each item in the list should have a single key (the flag, minus the trailing `--`)
      whose value will be used as the flag value.

# vim:ft=yaml
