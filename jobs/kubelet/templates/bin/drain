#!/bin/bash
<% if p('drain') %>
set -eu

JOB=kubelet
BIN=drain
LOG_DIR=/var/vcap/sys/log/$JOB
JOB_DIR=/var/vcap/jobs/$JOB
DAT_DIR=/var/vcap/data/k8s/$JOB
NODENAME=$($JOB_DIR/bin/nodename)

exec 3>&1
exec >>$LOG_DIR/$BIN.log 2>&1

# put kube-* in our path
export PATH=$PATH:/var/vcap/packages/k8s/bin
export KUBECONFIG=$DAT_DIR/automaton.kubeconfig

if pgrep -x kubelet; then
  echo "[$(date)] $BIN/$$: [$NODENAME] currently running the following pods:"
  kubectl get pod -A
  echo "[$(date)] $BIN/$$: [$NODENAME] draining this kubernetes node"
  kubectl drain --force --ignore-daemonsets --delete-local-data $NODENAME
  echo "[$(date)] $BIN/$$: [$NODENAME] drain complete; the following pods remain (this may fail, and that's ok):"
  kubectl get pod -A || true
  echo "[$(date)] $BIN/$$: [$NODENAME] drain script exiting 0."
else
  echo "[$(date)] $BIN/$$: [$NODENAME] kubelet not running; skipping drain..."
fi
kubectl delete node $NODENAME --ignore-not-found
# BOSH expects a literal '0' printed on stdout, to indicate
# that the drain was successful.  Since we can't print anything
# else to stdout, we redirect fd 3 to the terminal, and redirect
# fd 1 off to stderr (1>&2).. Printing to &3 is "stdout" for BOSH.
echo >&3 "0"
exit 0
<% else %>
# skipping drain...
echo "0"
exit 0
<% end %>
