#!/bin/bash
set -eu
<%

  ##     ##    ###    ##       #### ########     ###    ######## ####  #######  ##    ##
  ##     ##   ## ##   ##        ##  ##     ##   ## ##      ##     ##  ##     ## ###   ##
  ##     ##  ##   ##  ##        ##  ##     ##  ##   ##     ##     ##  ##     ## ####  ##
  ##     ## ##     ## ##        ##  ##     ## ##     ##    ##     ##  ##     ## ## ## ##
   ##   ##  ######### ##        ##  ##     ## #########    ##     ##  ##     ## ##  ####
    ## ##   ##     ## ##        ##  ##     ## ##     ##    ##     ##  ##     ## ##   ###
     ###    ##     ## ######## #### ########  ##     ##    ##    ####  #######  ##    ##

  p('cluster.name').match(/^[a-zA-Z][a-zA-Z0-9._-]*$/) or
    raise 'cluster.name must be alphanumeric (no spaces are allowed)'

-%>

JOB=control
BIN=api
SIGTERM_FOR=15
SIGKILL_FOR=5

RUN_DIR=/var/vcap/sys/run/$JOB
LOG_DIR=/var/vcap/sys/log/$JOB
JOB_DIR=/var/vcap/jobs/$JOB
CERTS_DIR=/var/vcap/data/k8s/certs
PIDFILE=$RUN_DIR/$BIN.pid
exec >>$LOG_DIR/$BIN.log 2>&1

# set kube-* binaries in our path
export PATH=$PATH:/var/vcap/packages/k8s/bin

case $1 in
  start)
    mkdir -p $RUN_DIR

    echo "[$(date)] $BIN/$$: starting up..."
    if [[ -f $PIDFILE ]]; then
      PID=$(head -1 $PIDFILE)
      if [[ -n "$PID" ]]; then
        if [[ -e /proc/$PID ]]; then
          echo "[$(date)] $BIN/$$: found pid file $PIDFILE, with pid '$PID' (which is running)"
          exit 1
        fi
        echo "[$(date)] $BIN/$$: found (stale) pid file $PIDFILE, with pid '$PID' (which is defunct)"
      fi
      rm -f $PIDFILE
    fi
    kill -9 $(pgrep kube-api-server | grep -v $$) || true

    echo $$ > $PIDFILE
    exec kube-apiserver \
           --advertise-address=<%= spec.ip %> \
           --allow-privileged=true \
           --apiserver-count=3 \
           --audit-log-maxage=30 \
           <% if p('cloud-provider.type', '') != '' %>--cloud-provider=<%= p('cloud-provider.type') %> --cloud-config=/var/vcap/jobs/control/etc/cloud-config <% end %>\
           --audit-log-maxbackup=3 \
           --audit-log-maxsize=100 \
           --audit-log-path=$LOG_DIR/audit.log \
           <% if p('apiserver.audit-policy', '') != '' %>--audit-policy-file=$JOB_DIR/etc/audit-policy.yml <% end %>\
           --authorization-mode=Node,RBAC \
           --bind-address=0.0.0.0 \
           --client-ca-file=$JOB_DIR/tls/ca/cert.pem \
           --enable-aggregator-routing=true \
           --enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \
           --etcd-cafile=$JOB_DIR/tls/ca/cert.pem \
           --etcd-certfile=$CERTS_DIR/api/cert.pem \
           --etcd-keyfile=$CERTS_DIR/api/key.pem \
           --etcd-servers=<%= link('etcd').instances.map { |vm| "https://#{vm.address}:#{link('etcd').p('port')}" }.join(',') %> \
           --event-ttl=1h \
           --encryption-provider-config=$JOB_DIR/etc/encryption.yml \
           --kubelet-certificate-authority=$JOB_DIR/tls/ca/cert.pem \
           --kubelet-client-certificate=$CERTS_DIR/kubelet-client/cert.pem \
           --kubelet-client-key=$CERTS_DIR/kubelet-client/key.pem \
           --kubelet-https=true \
           --runtime-config=api/all=true \
           --service-account-key-file=$JOB_DIR/tls/sa/cert.pem \
           --service-cluster-ip-range=<%= p('networks.services') %> \
           --service-node-port-range=30000-32767 \
           --tls-cert-file=$CERTS_DIR/api/cert.pem \
           --tls-private-key-file=$CERTS_DIR/api/key.pem \
           --v=2 <% p('apiserver.flags', []).each do |kv| %><% kv.each do |flag,value| %>--<%= flag %>="<%= value.to_s.gsub(/"/, '\\"') %>" <% end %><% end %>
    echo "[$(date)] $BIN/$$: exec failed!"
    exit 42
    ;;


  stop)
    echo "[$(date)] $BIN/$$: shutting down..."
    if [[ -f $PIDFILE ]]; then
      PID=$(head -1 $PIDFILE)
      if [[ -n "$PID" ]]; then
        if [[ -e /proc/$PID ]]; then
          echo "[$(date)] $BIN/$$: found pid file $PIDFILE, with pid '$PID' (which is running)"
          echo "[$(date)] $BIN/$$: sending SIGTERM for ${SIGTERM_FOR}s, followed by a SIGKILL..."
          for i in $(seq 1 $(expr $SIGTERM_FOR \* 10)); do
            kill -TERM $PID || true
            if [[ ! -e /proc/$PID ]]; then
              echo "[$(date)] $BIN/$$: pid $PID terminated (via SIGTERM)"
              rm -f $PIDFILE
              echo "[$(date)] $BIN/$$: shut down complete"
              exit 0
            fi
            sleep 0.1
          done

          echo "[$(date)] $BIN/$$: pid $PID did not termiante (via SIGTERM) within ${SIGTERM_FOR}s; sending a SIGKILL and waiting ${SIGKILL_FOR}s..."
          for i in $(seq 1 $(expr $SIGKILL_FOR \* 10)); do
            kill -KILL $PID || true
            if [[ ! -e /proc/$PID ]]; then
              echo "[$(date)] $BIN/$$: pid $PID terminated (via SIGKILL)"
              rm -f $PIDFILE
              echo "[$(date)] $BIN/$$: shut down complete"
              exit 0
            fi
            sleep 0.1
          done
          echo "[$(date)] $BIN/$$: pid $PID did not termiante (via SIGKILL) within ${SIGKILL_FOR}s; giving up."
          exit 1
        fi

        echo "[$(date)] $BIN/$$: found (stale) pid file $PIDFILE, with pid '$PID' (which is defunct)"
      fi
      rm -f $PIDFILE
    fi
    echo "[$(date)] $BIN/$$: shut down complete"
    exit 0
    ;;
esac
