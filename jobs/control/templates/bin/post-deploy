#!/bin/bash
set -eu
exec 2>&1

JOB=control
BIN=post-deploy
JOB_DIR=/var/vcap/jobs/$JOB
CERTS_DIR=/var/vcap/data/k8s/certs
DAT_DIR=/var/vcap/data/k8s

# put kube-* in our path
export PATH=$PATH:/var/vcap/packages/k8s/bin

echo "[$(date)] $BIN/$$: post-deploy starting up..."

clusterok() {
  status=$(curl -sf http://localhost:8080/healthz)
  test "s'${status}" = "s'ok"
}

echo "[$(date)] $BIN/$$: waiting up to <%= p('coalesce') %> seconds for cluster to coalesce..."
timer=<%= p('coalesce').to_i * 10 %>
dsec=0
while ! clusterok; do
  echo -n '.'
  if [[ $timer -lt 1 ]]; then
    echo
    echo "[$(date)] $BIN/$$: cluster did not coalesce within <%= p('coalesce') %> seconds"
    echo "[$(date)] $BIN/$$: \`curl -v http://localhost:8080/healthz\` said:"
    curl -v http://localhost:8080/healthz
    echo "[$(date)] $BIN/$$: TERMINATING"
    exit 1
  fi

  timer=$((timer - 1))
  dsec=$((dsec + 1))
  sleep 0.1
done
echo
echo "[$(date)] $BIN/$$: cluster coalesced in $(((dsec + 5) / 10)) seconds!"

echo "[$(date)] $BIN/$$: refreshing our kubeconfig..."
mkdir -p $DAT_DIR
kubectl config set-cluster <%= p('cluster.name') %> \
    --certificate-authority=$JOB_DIR/tls/ca/cert.pem \
    --embed-certs=true \
    --server=https://127.0.0.1:6443 \
    --kubeconfig=$DAT_DIR/admin.kubeconfig
kubectl config set-credentials admin \
    --client-certificate=$CERTS_DIR/automaton/cert.pem \
    --client-key=$CERTS_DIR/automaton/key.pem \
    --embed-certs=true \
    --kubeconfig=$DAT_DIR/admin.kubeconfig
kubectl config set-context default \
    --cluster=<%= p('cluster.name') %> \
    --user=admin \
    --kubeconfig=$DAT_DIR/admin.kubeconfig
kubectl config use-context default --kubeconfig=$DAT_DIR/admin.kubeconfig
export KUBECONFIG=$DAT_DIR/admin.kubeconfig

<% if !spec.bootstrap %>
echo "[$(date)] $BIN/$$: not bootstrap node; nothing more to do."
<% else %>
echo "[$(date)] $BIN/$$: applying kube-proxy daemonset configuration..."
kubectl apply -f $JOB_DIR/k8s/kube-proxy.yml

<% if p('coredns.enabled') %>
echo "[$(date)] $BIN/$$: applying kube-dns (coredns) configuration..."
kubectl apply -f $JOB_DIR/k8s/kube-dns.yml
<% else %>
echo "[$(date)] $BIN/$$: SKIPPING kubernetes-coredns configuration..."
<% end %>
(shopt -s nullglob
for yml in /var/vcap/jobs/*/k8s-init/*.yml; do
  name=${yml%%.yml};         name=${name##*/}
   job=${yml%%/k8s-init/*};  job=${job##*/}
  echo "[$(date)] $BIN/$$: applying k8s-init $name (from $job) configuration..."
  kubectl apply -f $yml
done)

<% if p('dashboard.enabled') %>
echo "[$(date)] $BIN/$$: applying kubernetes-dashboard configuration..."
kubectl apply -f $JOB_DIR/k8s/dashboard.yml
kubectl delete -f $JOB_DIR/k8s/dashboard-acl.yml || true # might not exist yet...
<% if p('dashboard.cluster-admin') %>
kubectl apply -f $JOB_DIR/k8s/dashboard-acl.yml
<% end %>
<% else %>
echo "[$(date)] $BIN/$$: SKIPPING kubernetes-dashboard configuration..."
<% end %>

<% if p('cert-manager.enabled') %>
echo "[$(date)] $BIN/$$: applying cert-manager configuration..."
kubectl apply -f $JOB_DIR/k8s/cert-manager.yml
kubectl -n cert-manager rollout status --timeout=<%= p('cert-manager.timeout') %> deployment/cert-manager
kubectl -n cert-manager rollout status --timeout=<%= p('cert-manager.timeout') %> deployment/cert-manager-cainjector
kubectl -n cert-manager rollout status --timeout=<%= p('cert-manager.timeout') %> deployment/cert-manager-webhook
kubectl apply -f $JOB_DIR/k8s/cm-caissuer.yml
<% else %>
echo "[$(date)] $BIN/$$: SKIPPING cert-manager configuration..."
<% end %>

<% if p('bootstrap', '') != '' %>
echo "[$(date)] $BIN/$$: applying user-supplied bootstrap configuration..."
kubectl apply -f $JOB_DIR/k8s/bootstrap.yml
<% else %>
echo "[$(date)] $BIN/$$: no user-supplied bootstrap configuration supplied; SKIPPING..."
<% end %>


(shopt -s nullglob
for yml in /var/vcap/jobs/*/k8s-addons/*.yml; do
  name=${yml%%.yml};          name=${name##*/}
   job=${yml%%/k8s-addons/*};  job=${job##*/}
  echo "[$(date)] $BIN/$$: applying k8s-addon $name (from $job) configuration..."
  kubectl apply -f $yml
done)
<% end %>

echo "[$(date)] $BIN/$$: complete."
